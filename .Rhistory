# for the HTML and PDF rendering. This exercise is left to the reader.
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the PDF version to temporary html location
tmp_html_cv_loc <- fs::file_temp(ext = ".html")
rmarkdown::render("cv.rmd",
params = list(pdf_mode = TRUE),
output_file = tmp_html_cv_loc)
# Convert to PDF using Pagedown
pagedown::chrome_print(input = tmp_html_cv_loc,
output = "cv.pdf")
# This script builds both the HTML and PDF versions of your CV
# If you wanted to speed up rendering for googlesheets driven CVs you could use
# this script to cache a version of the CV_Printer class with data already
# loaded and load the cached version in the .Rmd instead of re-fetching it twice
# for the HTML and PDF rendering. This exercise is left to the reader.
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the PDF version to temporary html location
tmp_html_cv_loc <- fs::file_temp(ext = ".html")
rmarkdown::render("cv.rmd",
params = list(pdf_mode = TRUE),
output_file = tmp_html_cv_loc)
# Convert to PDF using Pagedown
pagedown::chrome_print(input = tmp_html_cv_loc,
output = "cv.pdf")
# This script builds both the HTML and PDF versions of your CV
# If you wanted to speed up rendering for googlesheets driven CVs you could use
# this script to cache a version of the CV_Printer class with data already
# loaded and load the cached version in the .Rmd instead of re-fetching it twice
# for the HTML and PDF rendering. This exercise is left to the reader.
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the PDF version to temporary html location
tmp_html_cv_loc <- fs::file_temp(ext = ".html")
rmarkdown::render("cv.rmd",
params = list(pdf_mode = TRUE),
output_file = tmp_html_cv_loc)
# Convert to PDF using Pagedown
pagedown::chrome_print(input = tmp_html_cv_loc,
output = "cv.pdf")
# This script builds both the HTML and PDF versions of your CV
# If you wanted to speed up rendering for googlesheets driven CVs you could use
# this script to cache a version of the CV_Printer class with data already
# loaded and load the cached version in the .Rmd instead of re-fetching it twice
# for the HTML and PDF rendering. This exercise is left to the reader.
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the PDF version to temporary html location
tmp_html_cv_loc <- fs::file_temp(ext = ".html")
rmarkdown::render("cv.rmd",
params = list(pdf_mode = TRUE),
output_file = tmp_html_cv_loc)
# Convert to PDF using Pagedown
pagedown::chrome_print(input = tmp_html_cv_loc,
output = "cv.pdf")
# This script builds both the HTML and PDF versions of your CV
# If you wanted to speed up rendering for googlesheets driven CVs you could use
# this script to cache a version of the CV_Printer class with data already
# loaded and load the cached version in the .Rmd instead of re-fetching it twice
# for the HTML and PDF rendering. This exercise is left to the reader.
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the PDF version to temporary html location
tmp_html_cv_loc <- fs::file_temp(ext = ".html")
rmarkdown::render("cv.rmd",
params = list(pdf_mode = TRUE),
output_file = tmp_html_cv_loc)
# Convert to PDF using Pagedown
pagedown::chrome_print(input = tmp_html_cv_loc,
output = "cv.pdf")
# This script builds both the HTML and PDF versions of your CV
# If you wanted to speed up rendering for googlesheets driven CVs you could use
# this script to cache a version of the CV_Printer class with data already
# loaded and load the cached version in the .Rmd instead of re-fetching it twice
# for the HTML and PDF rendering. This exercise is left to the reader.
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the PDF version to temporary html location
tmp_html_cv_loc <- fs::file_temp(ext = ".html")
rmarkdown::render("cv.rmd",
params = list(pdf_mode = TRUE),
output_file = tmp_html_cv_loc)
# Convert to PDF using Pagedown
pagedown::chrome_print(input = tmp_html_cv_loc,
output = "cv.pdf")
# This script builds both the HTML and PDF versions of your CV
# If you wanted to speed up rendering for googlesheets driven CVs you could use
# this script to cache a version of the CV_Printer class with data already
# loaded and load the cached version in the .Rmd instead of re-fetching it twice
# for the HTML and PDF rendering. This exercise is left to the reader.
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the PDF version to temporary html location
tmp_html_cv_loc <- fs::file_temp(ext = ".html")
rmarkdown::render("cv.rmd",
params = list(pdf_mode = TRUE),
output_file = tmp_html_cv_loc)
# Convert to PDF using Pagedown
pagedown::chrome_print(input = tmp_html_cv_loc,
output = "cv.pdf")
# This script builds both the HTML and PDF versions of your CV
# If you wanted to speed up rendering for googlesheets driven CVs you could use
# this script to cache a version of the CV_Printer class with data already
# loaded and load the cached version in the .Rmd instead of re-fetching it twice
# for the HTML and PDF rendering. This exercise is left to the reader.
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the PDF version to temporary html location
tmp_html_cv_loc <- fs::file_temp(ext = ".html")
rmarkdown::render("cv.rmd",
params = list(pdf_mode = TRUE),
output_file = tmp_html_cv_loc)
# Convert to PDF using Pagedown
pagedown::chrome_print(input = tmp_html_cv_loc,
output = "cv.pdf")
?datadrivencv::build_network_logo
# This script builds both the HTML and PDF versions of your CV
# If you wanted to speed up rendering for googlesheets driven CVs you could use
# this script to cache a version of the CV_Printer class with data already
# loaded and load the cached version in the .Rmd instead of re-fetching it twice
# for the HTML and PDF rendering. This exercise is left to the reader.
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the PDF version to temporary html location
tmp_html_cv_loc <- fs::file_temp(ext = ".html")
rmarkdown::render("cv.rmd",
params = list(pdf_mode = TRUE),
output_file = tmp_html_cv_loc)
# Convert to PDF using Pagedown
pagedown::chrome_print(input = tmp_html_cv_loc,
output = "cv.pdf")
?blogdown::new_post
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
install.packages("keras")
install.packages("tensorflow")
citation("keras")
citation("tidyverse")
citation("Rtsne")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(keras)
mnist <- dataset_mnist()
tensorflow::install_tensorflow()
Y
library(tidyverse)
library(keras)
mnist <- dataset_mnist()
keras::install_keras()
library(keras)
use_condaenv("r-reticulate", required = TRUE)
library(keras)
use_condaenv("r-reticulate", required = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(keras)
mnist <- dataset_mnist()
reticulate::py_config()
keras::install_keras()
tensorflow::install_tensorflow()
use_condaenv("/usr/bin/python3", required = TRUE)
library(tidyverse)
library(keras)
mnist <- dataset_mnist()
tensorflow::install_tensorflow()
tensorflow::tf_version()
reticulate::miniconda_uninstall()
reticulate::install_miniconda()
reticulate::miniconda_uninstall()
tensorflow::install_tensorflow()
n
tensorflow::install_tensorflow(method="conda")
library(reticulate)
library(tidyverse)
conda_list()
reticulate::use_condaenv("r-reticulate", required = TRUE)
library(reticulate)
reticulate::use_condaenv("r-reticulate", required = TRUE)
reticulate::conda_version()
reticulate::conda_list()
reticulate::configure_environment()
reticulate::use_python("~/opt/anaconda3/envs/r-reticulate/python", required = TRUE)
reticulate::use_python("~/opt/anaconda3/envs/r-reticulate/bin/python", required = TRUE)
reticulate::use_python("/opt/anaconda3/envs/r-reticulate/bin/python", required = TRUE)
tensorflow::install_tensorflow(method="conda")
reticulate::virtualenv_list()
tensorflow::install_tensorflow(method = 'conda', envname = 'r-reticulate')
reticulate::py_config()
reticulate::use_condaenv(condaenv = 'r-reticulate', required = TRUE)
reticulate::use_condaenv(condaenv = 'r-reticulate', required = TRUE)
reticulate::py_config()
base::environment()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(keras)
library(tensorflow)
library(tidyverse)
library(keras)
library(tensorflow)
tensorflow::install_tensorflow()
install.packages("tensorflow")
library(tidyverse)
library(keras)
library(tensorflow)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(keras)
mnist <- dataset_mnist()
tensorflow::install_tensorflow()
library(tidyverse)
library(keras)
mnist <- dataset_mnist()
base::env.profile()
base::environmentName()
base::baseenv()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dslabs)
mnist <- read_mnist() # Download MNIST dataset from default URL in dslabs package.
# We will take 2000 observations from the 'train' data and combine into a single
# dataframe
mnist_images <- data.frame("pixel"=mnist$train$images[1:2000,])
mnist_labels <- data.frame("label"=mnist$train$labels[1:2000])
mnist_sample <- bind_cols(mnist_labels, mnist_images)
mnist_sample$label <- as.factor(mnist_sample$label)
mnist_sample[,2:ncol(mnist_sample)] <- mnist_sample[,2:ncol(mnist_sample)]/255
# Define a function to visualise the images
view <- function(data){
view_df <- data %>%
mutate(image_number = row_number()) %>%
pivot_wider(names_from = image_number, values_from = everything())
return(view_df)
}
view <- function(data){
view_df <- data %>%
mutate(image_number = row_number())
return(view_df)
}
view(mnist_sample)
view_df <- mnist_sample %>%
mutate(image_number = row_number())
View(view_df)
view_df <- mnist_sample %>%
mutate(image_number = row_number()) %>%
pivot_wider(pixel, value, -label, -image_number)
view_df <- mnist_sample %>%
mutate(image_number = row_number()) %>%
pivot_wider(pixel, -label, -image_number)
view_df <- mnist_sample %>%
mutate(image_number = row_number()) %>%
pivot_wider(-label, -image_number)
view_df <- mnist_sample %>%
mutate(image_number = row_number()) %>%
pivot_wider(c(-label, -image_number))
view_df <- mnist_sample %>%
mutate(image_number = row_number()) %>%
pivot_wider()
view_df <- mnist_sample %>%
pivot_wider()
view_df <- mnist_sample %>%
pivot_wider()
view_df <- mnist_sample %>%
pivot_wider(everything())
view_df <- mnist_sample %>%
pivot_wider()
view_df <- mnist_sample %>%
rownames_to_column()
View(view_df)
view_df <- mnist_sample %>%
rownames_to_column() %>%
pivot_longer(-rowname)
view_df <- mnist_sample %>%
rownames_to_column() %>%
pivot_longer(-rowname, -label)
view_df <- mnist_sample %>%
select(-label) %>%
rownames_to_column()
View(view_df)
view_df <- mnist_sample %>%
select(-label) %>%
rownames_to_column() %>%
pivot_longer(-rowname)
View(view_df)
view_df <- mnist_sample %>%
select(-label) %>%
rownames_to_column() %>%
pivot_longer(-rowname) %>%
pivot_wider(names_from = rowname, values_from = value)
View(view_df)
view_df <- mnist_sample %>%
select(-label) %>%
rownames_to_column() %>%
pivot_longer(-rowname) %>%
pivot_wider(names_from = rowname, values_from = value) %>%
pivot_longer(-name)
view_df <- mnist_sample %>%
select(-label) %>%
rownames_to_column() %>%
pivot_longer(-rowname) %>%
pivot_wider(names_from = rowname, values_from = value) %>%
pivot_longer(-rowname)
view_df <- mnist_sample %>%
select(-label) %>%
rownames_to_column() %>%
pivot_wider(names_from = rowname, values_from = value) %>%
View(view_df)
view_df <- mnist_sample %>%
select(-label) %>%
rownames_to_column() %>%
pivot_wider(names_from = rowname, values_from = value)
view_df <- mnist_sample %>%
select(-label) %>%
rownames_to_column() %>%
pivot_longer(-rowname) %>%
pivot_wider(names_from = rowname, values_from = value)
View(view_df)
?row_number
view_df <- mnist_sample %>%
select(-label) %>%
rownames_to_column() %>%
pivot_longer(-rowname)
View(view_df)
view_df <- mnist_sample %>%
select(-label) %>%
rownames_to_column() %>%
pivot_longer(-rowname) %>%
pivot_wider(names_from = rowname, values_from = value)
View(view_df)
1 %% 28
28 %% 28
0 %% 28
28 %% 28
view_df <- mnist_sample %>%
select(-label) %>%
rownames_to_column() %>%
pivot_longer(-rowname)
View(view_df)
pixels_gathered <- mnist_sample %>%
mutate(instance = row_number()) %>%
gather(pixel, value, -label, -instance) %>%
tidyr::extract(pixel, "pixel", "(\\d+)", convert = TRUE) %>%
mutate(pixel = pixel - 1,
x = pixel %% 28,
y = 28 - pixel %/% 28)
View(pixels_gathered)
2 %% 28
?gather
view_df <- mnist_sample %>%
mutate(instance = row_number()) %>%
pivot_longer(c(-label, -instance), names_to = pixel, values_to = value)
view_df <- mnist_sample %>%
mutate(instance = row_number()) %>%
pivot_longer(c(-label, -instance), names_to = "pixel", values_to = "value")
View(view_df)
view_df <- mnist_sample %>%
mutate(instance = row_number()) %>%
pivot_longer(c(-label, -instance), names_to = "pixel", values_to = "value") %>%
mutate(x = (row_number() - 1) %% 28, y = 28 - ((row_number() - 1) %% 28))
View(view_df)
View(pixels_gathered)
view_df <- mnist_sample %>%
mutate(rownumber = row_number()) %>%
pivot_longer(c(-label), names_to = "pixel", values_to = "value") %>%
mutate(x = (row_number() - 1) %% 28, y = 28 - ((row_number() - 1) %% 28))
View(view_df)
view_df <- mnist_sample %>%
mutate(rownumber = row_number()) %>%
pivot_longer(c(-rownumber), names_to = "pixel", values_to = "value") %>%
mutate(x = (row_number() - 1) %% 28, y = 28 - ((row_number() - 1) %% 28))
view_df <- mnist_sample %>%
mutate(rownumber = row_number()) %>%
pivot_longer(c(-label,-rownumber), names_to = "pixel", values_to = "value") %>%
mutate(x = (row_number() - 1) %% 28, y = 28 - ((row_number() - 1) %% 28))
View(view_df)
view_df <- mnist_sample %>%
mutate(rownumber = row_number()) %>%
pivot_longer(c(-label,-rownumber), names_to = "pixel", values_to = "value")
View(view_df)
View(mnist_sample)
view_df <- mnist_sample %>%
mutate(rownumber = row_number()) %>%
pivot_longer(c(-label), names_to = "pixel", values_to = "value")
View(view_df)
pixels_gathered <- mnist_sample %>%
+     mutate(instance = row_number()) %>%
+     gather(pixel, value, -label, -instance)
pixels_gathered <- mnist_sample %>%mutate(instance = row_number()) %>%gather(pixel, value, -label, -instance)
View(pixels_gathered)
view_df <- mnist_sample %>% mutate(instance = row_number()) %>%pivot_longer(c(-label, -instance), names_to = "pixel", values_to = "value")
View(view_df)
view_df <- mnist_sample %>% mutate(instance = row_number()) %>%pivot_longer(c(-instance), names_to = "pixel", values_to = "value")
View(mnist_sample)
view_df <- mnist_sample %>% mutate(instance = row_number()) %>%pivot_longer(c(-label), names_to = "pixel", values_to = "value")
view_df <- mnist_sample %>% mutate(instance = row_number()) %>%pivot_longer(c(label), names_to = "pixel", values_to = "value")
view_df <- mnist_sample %>% mutate(instance = row_number()) %>%pivot_longer(c(-pixels), names_to = "pixel", values_to = "value")
view_df <- mnist_sample %>% mutate(instance = row_number()) %>%pivot_longer(c(-pixel), names_to = "pixel", values_to = "value")
pixels_gathered <- mnist_sample %>%
mutate(instance = row_number()) %>%
gather(pixel, value, -label, -instance) %>%
tidyr::extract(pixel, "pixel", "(\\d+)", convert = TRUE) %>%
mutate(pixel = pixel - 1,
x = pixel %% 28,
y = 28 - pixel %/% 28)
?pivot_longer
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE,
results = 'hide',
error = FALSE)
library(tidyverse)
library(dslabs)
mnist <- read_mnist() # Download MNIST dataset from default URL in dslabs package.
# We will take 2000 observations from the 'train' data and combine into a single
# dataframe
mnist_images <- data.frame("pixel"=mnist$train$images[1:2000,])
mnist_labels <- data.frame("label"=mnist$train$labels[1:2000])
mnist_sample <- bind_cols(mnist_labels, mnist_images)
mnist_sample$label <- as.factor(mnist_sample$label)
mnist_sample[,2:ncol(mnist_sample)] <- mnist_sample[,2:ncol(mnist_sample)]/255
# Define a function to visualise the images
view <- function(data){
view_df <- data[1:9,] %>%
mutate(img_id = row_number()) %>%
pivot_longer(cols = starts_with("pixel."),
names_to = "pixel",
names_prefix = "pixel.",
values_to = "value") %>%
arrange(pixel) %>%
mutate(pixel = as.numeric(pixel) - 1,
x = pixel %% 28,
y = 28 - (pixel %/% 28))
ggplot(view_df, aes(x = x, y = y, fill = value)) +
geom_tile() +
facet_wrap(vars(img_id, label), labeller = "label_both") +
coord_fixed() +
theme(legend.position = "none")
}
view(mnist_sample)
mnist_pca <- prcomp(mnist_sample %>% select(-label))
total_variance <- sum(mnist_pca$sdev^2)
pc_variance <- cumsum(mnist_pca$sdev^2)
variance_explained <- pc_variance/total_variance
pc_df <- data.frame(PC_num = 1:length(variance_explained), variance_explained)
ggplot(pc_df, aes(x = PC_num, y = variance_explained)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = seq.int(0, max(pc_df$PC_num), by = 100)) +
scale_y_continuous(breaks = seq(0,1,by = 0.1))
num_pc <- 150
num_pc <- 150
mnist_U <- matrix(mnist_pca$rotation[,1:num_pc], ncol = num_pc)
mnist_XU <- matrix(mnist_pca$x[,1:num_pc], ncol = num_pc)
xbar <- colMeans(mnist_sample[,2:ncol(mnist_sample)])
xbar <- matrix(rep(xbar, 2000), byrow = TRUE, nrow = 2000)
X_recon <- data.frame(pixel = matrix(xbar + (mnist_XU %*% t(mnist_U)), ncol = 784))
mnist_pc <- bind_cols(label = mnist_sample$label, pixel = X_recon)
view(mnist_pc)
150/784
num_pc <- 150
mnist_U <- matrix(mnist_pca$rotation[,1:num_pc], ncol = num_pc)
mnist_XU <- matrix(mnist_pca$x[,1:num_pc], ncol = num_pc)
xbar <- colMeans(mnist_sample[,2:ncol(mnist_sample)])
xbar <- matrix(rep(xbar, 2000), byrow = TRUE, nrow = 2000)
X_recon <- data.frame(pixel = matrix(xbar + (mnist_XU %*% t(mnist_U)), ncol = 784))
mnist_pc <- bind_cols(label = mnist_sample$label, pixel = X_recon)
view(mnist_pc)
dim(mnist_U)
dim(xbar)
?geom_text
pc_1 <- mnist_pca$x[,1]
pc_2 <- mnist_pca$x[,2]
pca_2d <- data.frame(as.factor(mnist_sample$label), pc_1, pc_2)
ggplot(pca_2d aes(x = pc_1, y = pc_2, label = label)) +
pc_1 <- mnist_pca$x[,1]
pc_2 <- mnist_pca$x[,2]
pca_2d <- data.frame(as.factor(mnist_sample$label), pc_1, pc_2)
ggplot(pca_2d, aes(x = pc_1, y = pc_2, label = label)) +
geom_text(col = label)
pca_2d <- data.frame(label = as.factor(mnist_sample$label), pc_1, pc_2)
ggplot(pca_2d, aes(x = pc_1, y = pc_2, label = label)) +
geom_text(col = label)
View(pca_2d)
pc_1 <- mnist_pca$x[,1]
pc_2 <- mnist_pca$x[,2]
pca_2d <- data.frame(label = as.factor(mnist_sample$label), pc_1, pc_2)
ggplot(pca_2d, aes(x = pc_1, y = pc_2, label = label, col = label)) +
geom_text()
ggplot(pca_2d, aes(x = pc_1, y = pc_2, label = label, col = label)) +
geom_text(show.legend = FALSE)
